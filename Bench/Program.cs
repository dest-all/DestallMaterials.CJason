using System.Text.Json;
using System.Text.Json.Serialization;
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Configs;
using BenchmarkDotNet.Jobs;
using BenchmarkDotNet.Order;
using BenchmarkDotNet.Running;
using BenchmarkDotNet.Toolchains.InProcess.NoEmit;
using CJason.Provision;
using SampleNamespace;

var config = DefaultConfig.Instance
    .AddJob(Job
         .MediumRun
         .WithLaunchCount(1)
         .WithToolchain(InProcessNoEmitToolchain.Instance));

BenchmarkRunner.Run<BenchRunner>(config);

[MemoryDiagnoser]
[Orderer(SummaryOrderPolicy.FastestToSlowest)]
[RankColumn]
public class BenchRunner
{
    static string GetString() => Guid.NewGuid().ToString();
    static int GetInt() => new object().GetHashCode();

    static int _a;

    static Father CreateInstance() => new Father
    {
        Name = GetString(),
        Age = 51,
        Children = new Child[]
                        {
                new() { Name = GetString(), Age = GetInt() },
                new() { Name = GetString(), Age = GetInt() }
                        },
        Complaints = ToArray(ToArray(ToArray(ToArray(new Dictionary<string, Dictionary<string, Child[]>>
            {
                { "Complaint", new()
                    {
                        {
                            "Subcomplaint", new Child[]
                            {
                                new Child
                                {
                                    Age = GetInt(),
                                    Name = GetString()
                                }
                            }
                        }
                    }
                }
            })))),

        Priorities = new()
            {
                { GetString(),
                    new()
                    {
                        { GetString(), new()
                            {
                                {GetString(), new Child[]
                                    {
                                        new()
                                        {
                                            Age = GetInt(),
                                            Name = GetString()
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
        Delays = TimeSpan.FromSeconds(GetInt()),
        Symbol = '\t',
        Times = new Dictionary<DateTime, TimeSpan>()
            {
                {
                    new DateTime(324,2,3), TimeSpan.FromHours(GetInt())
                }
            }
    };

    static string StandardSerialize<T>(T item) => JsonSerializer.Serialize(item, new JsonSerializerOptions()
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
    });

    static T[] ToArray<T>(T item) => new T[1] { item };
    static BenchRunner()
    {
        _oneFather = CreateInstance();

        _manyFathers = CreateManyFathers();

        _oneFatherJson = StandardSerialize(_oneFather);

        _manyFathersJson = SerializeFathers(_manyFathers);
    }

    private static Father[] CreateManyFathers()
        => Enumerable.Range(0, 50).Select(i => CreateInstance()).ToArray();

    static readonly Father _oneFather;
    static readonly Father[] _manyFathers;
    static readonly string _oneFatherJson;
    static readonly string _manyFathersJson;

    static string SerializeFathers(IEnumerable<Father> fathers)
    {
        var length = fathers.CalculateJsonLength(f => f.CalculateJsonLength());
        Span<char> span = stackalloc char[length];
        length = length - span.FillWith(fathers, (j, obj) => j.FillWith(obj)).Length;
        var result = new string(span[..length]);
        return result;
    }

    //[Benchmark]
    //public void Serialize_One_StandardAuto()
    //{
    //    var json = JsonSerializer.Serialize(_oneFather, FatherContext.Default.Father);
    //}

    //[Benchmark]
    //public void Serialize_Many_StandardAuto()
    //{
    //    var json = JsonSerializer.Serialize(_manyFathers, FatherContext.Default.FatherArray);
    //}

    //[Benchmark]
    //public void Deserialize_One_StandardAuto()
    //{
    //    var father = JsonSerializer.Deserialize<Father>(_oneFatherJson, FatherContext.Default.Father);
    //}

    [Benchmark]
    public void Deserialize_Many_StandardAuto()
    {
        var fathers = JsonSerializer.Deserialize<Father[]>(_manyFathersJson, FatherContext.Default.FatherArray);
    }

    //[Benchmark]
    //public void Serialize_One_Standard()
    //{
    //    var json = JsonSerializer.Serialize(_oneFather);
    //}

    //[Benchmark]
    //public void Serialize_One_Autogenerated()
    //{
    //    var json = _oneFather.Serialize();
    //}

    //[Benchmark]
    //public void Deserialize_One_Standard()
    //{
    //    var father = JsonSerializer.Deserialize<Father>(_oneFatherJson);
    //}

    //[Benchmark]
    //public void Deserialize_One_Autogenerated()
    //{
    //    _oneFatherJson.AsSpan().RemoveObject(out Father father);
    //}

    //[Benchmark]
    //public void Serialize_Many_Standard()
    //{
    //    var json = JsonSerializer.Serialize(_manyFathers);
    //}

    //[Benchmark]
    //public void Serialize_Many_Autogenerated()
    //{
    //    var json = SerializeFathers(_manyFathers);
    //}


    [Benchmark]
    public void Deserialize_Many_Autogenerated()
    {
        var fathersJson = _manyFathersJson;
        fathersJson.AsSpan().RemoveList((ReadOnlySpan<char> json, out Father item) => json.RemoveObject(out item), out var fathers);
    }


    [Benchmark]
    public void Deserialize_Many_Standard()
    {
        var fathersJson = _manyFathersJson;
        var fathers = JsonSerializer.Deserialize<Father[]>(fathersJson)
            ?? throw new InvalidOperationException();
    }
}


[JsonSerializable(typeof(Father))]
[JsonSerializable(typeof(Father[]))]
[JsonSerializable(typeof(int[]))]
public partial class FatherContext : JsonSerializerContext
{

}